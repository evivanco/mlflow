import mlflow
import numpy as np
import pandas as pd
from generate_synthetic_data import generate_synthetic_salary_data

def cargar_modelo_entrenado(run_id):
    """
    Carga el modelo y scaler desde MLflow usando el run_id
    """
    try:
        modelo = mlflow.sklearn.load_model(f"runs:/{run_id}/modelo_regresion_lineal")
        scaler = mlflow.sklearn.load_model(f"runs:/{run_id}/scaler")
        print(f"‚úÖ Modelo cargado exitosamente desde run_id: {run_id}")
        return modelo, scaler
    except Exception as e:
        print(f"‚ùå Error al cargar el modelo: {e}")
        return None, None

def predecir_salario_empleado(modelo, scaler, datos_empleado):
    """
    Predice el salario de un empleado usando el modelo entrenado
    """
    # Convertir a array numpy
    datos_array = np.array([datos_empleado])
    
    # Normalizar datos
    datos_scaled = scaler.transform(datos_array)
    
    # Hacer predicci√≥n
    salario_predicho = modelo.predict(datos_scaled)[0]
    
    return salario_predicho

def obtener_datos_empleado():
    """
    Solicita al usuario los datos del empleado de forma interactiva
    """
    print("\n" + "="*50)
    print("üìä PREDICCI√ìN DE SALARIO - DATOS DEL EMPLEADO")
    print("="*50)
    
    try:
        # Solicitar datos con validaci√≥n
        print("\nPor favor, ingresa los datos del empleado:")
        
        edad = float(input("‚Ä¢ Edad (22-65 a√±os): "))
        if not (22 <= edad <= 65):
            print("‚ö†Ô∏è  Advertencia: La edad debe estar entre 22 y 65 a√±os")
        
        experiencia = float(input("‚Ä¢ A√±os de experiencia laboral (0-35): "))
        if not (0 <= experiencia <= 35):
            print("‚ö†Ô∏è  Advertencia: La experiencia debe estar entre 0 y 35 a√±os")
        
        educacion = float(input("‚Ä¢ A√±os de educaci√≥n formal (12-22): "))
        if not (12 <= educacion <= 22):
            print("‚ö†Ô∏è  Advertencia: La educaci√≥n debe estar entre 12 y 22 a√±os")
        
        horas = float(input("‚Ä¢ Horas trabajadas por semana (30-60): "))
        if not (30 <= horas <= 60):
            print("‚ö†Ô∏è  Advertencia: Las horas deben estar entre 30 y 60")
        
        proyectos = int(input("‚Ä¢ N√∫mero de proyectos completados: "))
        if proyectos < 0:
            print("‚ö†Ô∏è  Advertencia: El n√∫mero de proyectos debe ser positivo")
        
        certificaciones = int(input("‚Ä¢ N√∫mero de certificaciones obtenidas: "))
        if certificaciones < 0:
            print("‚ö†Ô∏è  Advertencia: El n√∫mero de certificaciones debe ser positivo")
        
        return [edad, experiencia, educacion, horas, proyectos, certificaciones]
        
    except ValueError:
        print("‚ùå Error: Por favor ingresa valores num√©ricos v√°lidos")
        return None

def mostrar_resultado_prediccion(datos_empleado, salario_predicho):
    """
    Muestra el resultado de la predicci√≥n de forma atractiva
    """
    print("\n" + "="*60)
    print("üéØ RESULTADO DE LA PREDICCI√ìN")
    print("="*60)
    
    print(f"\nüìã Datos del empleado:")
    print(f"   ‚Ä¢ Edad: {datos_empleado[0]} a√±os")
    print(f"   ‚Ä¢ Experiencia: {datos_empleado[1]} a√±os")
    print(f"   ‚Ä¢ Educaci√≥n: {datos_empleado[2]} a√±os")
    print(f"   ‚Ä¢ Horas trabajo: {datos_empleado[3]} horas/semana")
    print(f"   ‚Ä¢ Proyectos completados: {datos_empleado[4]}")
    print(f"   ‚Ä¢ Certificaciones: {datos_empleado[5]}")
    
    print(f"\nüí∞ SALARIO PREDICHO:")
    print(f"   ${salario_predicho:,.2f} USD anuales")
    print(f"   ${salario_predicho/12:,.2f} USD mensuales")
    
    # Categorizar el salario
    if salario_predicho < 40000:
        categoria = "Junior"
    elif salario_predicho < 60000:
        categoria = "Intermedio"
    elif salario_predicho < 80000:
        categoria = "Senior"
    elif salario_predicho < 100000:
        categoria = "Experto"
    else:
        categoria = "Muy Experto"
    
    print(f"\nüè∑Ô∏è  Categor√≠a estimada: {categoria}")
    
    print("\n" + "="*60)

def menu_principal():
    """
    Men√∫ principal de la aplicaci√≥n
    """
    print("\n" + "="*60)
    print("ü§ñ PREDICTOR DE SALARIOS - MLflow + Regresi√≥n Lineal")
    print("="*60)
    print("\nOpciones disponibles:")
    print("1. üîÆ Hacer predicci√≥n de salario")
    print("2. üìä Ver ejemplos predefinidos")
    print("3. üîÑ Entrenar nuevo modelo")
    print("4. ‚ùå Salir")
    
    return input("\nSelecciona una opci√≥n (1-4): ")

def mostrar_ejemplos_predefinidos(modelo, scaler):
    """
    Muestra ejemplos de predicciones para diferentes perfiles
    """
    print("\n" + "="*60)
    print("üìä EJEMPLOS PREDEFINIDOS")
    print("="*60)
    
    ejemplos = [
        {
            "nombre": "Desarrollador Junior",
            "datos": [24, 1, 14, 35, 3, 1],
            "descripcion": "Reci√©n graduado, poca experiencia"
        },
        {
            "nombre": "Desarrollador Intermedio",
            "datos": [28, 4, 16, 40, 8, 2],
            "descripcion": "Algunos a√±os de experiencia"
        },
        {
            "nombre": "Desarrollador Senior",
            "datos": [32, 7, 18, 45, 15, 3],
            "descripcion": "Experiencia s√≥lida"
        },
        {
            "nombre": "Arquitecto de Software",
            "datos": [38, 12, 20, 50, 25, 5],
            "descripcion": "Mucha experiencia y responsabilidades"
        },
        {
            "nombre": "Tech Lead",
            "datos": [42, 15, 22, 55, 35, 7],
            "descripcion": "Liderazgo t√©cnico"
        }
    ]
    
    for i, ejemplo in enumerate(ejemplos, 1):
        salario = predecir_salario_empleado(modelo, scaler, ejemplo["datos"])
        
        print(f"\n{i}. {ejemplo['nombre']}")
        print(f"   Descripci√≥n: {ejemplo['descripcion']}")
        print(f"   Datos: Edad={ejemplo['datos'][0]}, Exp={ejemplo['datos'][1]}, Edu={ejemplo['datos'][2]}")
        print(f"   Salario predicho: ${salario:,.2f} USD")

def entrenar_nuevo_modelo():
    """
    Opci√≥n para entrenar un nuevo modelo
    """
    print("\n" + "="*60)
    print("üîÑ ENTRENAR NUEVO MODELO")
    print("="*60)
    
    print("\nPara entrenar un nuevo modelo, ejecuta:")
    print("python mlflow_regression_example.py")
    print("\nLuego copia el Run ID que aparece al final y √∫salo en esta aplicaci√≥n.")

def main():
    """
    Funci√≥n principal de la aplicaci√≥n interactiva
    """
    print("üöÄ Iniciando Predictor de Salarios...")
    
    # Solicitar Run ID
    print("\n" + "="*60)
    print("üìã CONFIGURACI√ìN INICIAL")
    print("="*60)
    
    print("\nPara usar esta aplicaci√≥n, necesitas el Run ID de un modelo entrenado.")
    print("Si a√∫n no tienes uno, ejecuta primero: python mlflow_regression_example.py")
    
    run_id = input("\nIngresa el Run ID del modelo (o presiona Enter para usar ejemplo): ").strip()
    
    if not run_id:
        print("‚ö†Ô∏è  No se proporcion√≥ Run ID. Por favor ejecuta primero el entrenamiento.")
        print("Ejecuta: python mlflow_regression_example.py")
        return
    
    # Cargar modelo
    modelo, scaler = cargar_modelo_entrenado(run_id)
    
    if modelo is None or scaler is None:
        print("\n‚ùå No se pudo cargar el modelo. Verifica:")
        print("1. Que el Run ID sea correcto")
        print("2. Que hayas ejecutado el entrenamiento primero")
        print("3. Que MLflow est√© configurado correctamente")
        return
    
    # Bucle principal
    while True:
        opcion = menu_principal()
        
        if opcion == "1":
            # Hacer predicci√≥n
            datos = obtener_datos_empleado()
            if datos:
                salario = predecir_salario_empleado(modelo, scaler, datos)
                mostrar_resultado_prediccion(datos, salario)
                
                # Preguntar si quiere hacer otra predicci√≥n
                continuar = input("\n¬øHacer otra predicci√≥n? (s/n): ").lower()
                if continuar != 's':
                    break
                    
        elif opcion == "2":
            # Mostrar ejemplos
            mostrar_ejemplos_predefinidos(modelo, scaler)
            input("\nPresiona Enter para continuar...")
            
        elif opcion == "3":
            # Entrenar nuevo modelo
            entrenar_nuevo_modelo()
            input("\nPresiona Enter para continuar...")
            
        elif opcion == "4":
            # Salir
            print("\nüëã ¬°Gracias por usar el Predictor de Salarios!")
            break
            
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor selecciona 1-4.")

if __name__ == "__main__":
    main() 